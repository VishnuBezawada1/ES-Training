A target board booting Linux proceeds thru several steps after reset to get to a machine spark off. The preliminary steps, together with ROM startup code and register configuration, are microprocessor hardware structured. kernel itself contains microprocessor architecture-dependent initialization code that is executed first. This initialization code configures the microprocessor registers for protected-mode operation and then invokes the architecture-independent kernel starting point called start_kernel. From this point on, the kernel boot process is identical for all architectures.
The Boot process involves following steps:
   1.After a processor is reset, it executes ROM startup code.
   2.The ROM startup code initializes the CPU, memory controller, and on-chip devices, and it configures the memory map. The ROM startup code 
   then  executes a bootloader.
   3.The bootloader decompresses the Linux kernel into RAM from Flash memory or a TFTP server transfer. It then executes a jump to the 
   kernel's first instruction. The kernel first configures microprocessor registers and then invokes start_kernel, which is the 
   architecture-independent starting point.
   4.The kernel initializes its caches and various hardware devices.
   5.The kernel mounts the root filesystem.
   6.The kernel executes the init process.
   7.The executing init process loads shared runtime libraries.
The Embedded boot sequence starts offevolved with the person switching on the system. This movement generates an electrical sign which activates the RESET pin of the CPU. As a end result, every CPU sign in were given reset, besides the Code segment and IP sign up, the usage of which the cope with of the primary bootloader is determined by using the CPU.

In the flow diagram terms used are:
	1. 1st stage Bootloader:- Initialize hardware components, 
				 - Prepare memory space for loading 2nd Stage program,
				 - Copy 2nd Stage program into memory space,
				 - Set up sp(stack pointer),
				 - Jump to entry point of 2nd Stage program.
	2. 2nd stage Bootloader:- Initialize hardware components used in this stage,
	 			 - Check memory map,
	 			 - Copy kernel and root file system images into memory,
	 			 - Set parameters,
	 			 - Boot kernel.
	3. Kernel:- it's miles the main layer between the OS and hardware. gives primary offerings for the OS.
	4. TPM:- Trusted Platform Module (Used for the verification of Kernel).

	
	





